module Day05 where

import Data.Sequence (Seq)
import qualified Data.Sequence as Seq

run :: Int -> Seq Int -> [Int] -> [Int]
run p prog inps = case code of
    -- addition
    1  -> run (p+4) (update addr prog (x+y)) inps
    -- multiplication
    2  -> run (p+4) (update addr prog (x*y)) inps
    -- input
    3  -> run (p+2) (update addr prog (head inps)) (tail inps)
    -- output
    4  -> v : run (p+2) prog inps
    -- jump-if-true
    5  -> if x /= 0 then run y prog inps else run (p+3) prog inps
    -- jump-if-false
    6  -> if x == 0 then run y prog inps else run (p+3) prog inps
    -- less than  
    7  -> if x < y then run (p+4) (update addr prog 1) inps else run (p+4) (update addr prog 0) inps
    -- equals  
    8  -> if x == y then run (p+4) (update addr prog 1) inps else run (p+4) (update addr prog 0) inps
    -- termination  
    99 -> []
    _  -> error "Incorrect code!"

    where
      reg i = prog `Seq.index` i
      code  = reg p `mod` 100
      modes = reg p `div` 100

      update i prod v = Seq.update i v prog

      addr | code `elem` [1,2,7,8] = reg (p+3)
           | code `elem` [3,4]     = reg (p+1)
           | otherwise           = error "Incorrect code!"

      x = case modes `mod` 10 of
        0 -> reg $ reg (p+1)
        1 -> reg (p+1)
        _ -> error "Incorrect mode!"

      y = case modes `div` 10 of
        0 -> reg $ reg (p+2)
        1 -> reg (p+2)
        _ -> error "Incorrect mode!"

      v = reg $ reg (p+1)

prog :: Seq Int
prog = Seq.fromList [3,225,1,225,6,6,1100,1,238,225,104,0,2,136,183,224,101,-5304,224,224,4,224,1002,223,8,223,1001,224,6,224,1,224,223,223,1101,72,47,225,1101,59,55,225,1101,46,75,225,1101,49,15,224,101,-64,224,224,4,224,1002,223,8,223,1001,224,5,224,1,224,223,223,102,9,210,224,1001,224,-270,224,4,224,1002,223,8,223,1001,224,2,224,1,223,224,223,101,14,35,224,101,-86,224,224,4,224,1002,223,8,223,101,4,224,224,1,224,223,223,1102,40,74,224,1001,224,-2960,224,4,224,1002,223,8,223,101,5,224,224,1,224,223,223,1101,10,78,225,1001,39,90,224,1001,224,-149,224,4,224,102,8,223,223,1001,224,4,224,1,223,224,223,1002,217,50,224,1001,224,-1650,224,4,224,1002,223,8,223,1001,224,7,224,1,224,223,223,1102,68,8,225,1,43,214,224,1001,224,-126,224,4,224,102,8,223,223,101,3,224,224,1,224,223,223,1102,88,30,225,1102,18,80,225,1102,33,28,225,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,108,677,677,224,102,2,223,223,1005,224,329,1001,223,1,223,1107,677,226,224,102,2,223,223,1006,224,344,1001,223,1,223,108,226,226,224,102,2,223,223,1005,224,359,1001,223,1,223,1108,677,226,224,102,2,223,223,1006,224,374,101,1,223,223,108,677,226,224,102,2,223,223,1006,224,389,1001,223,1,223,107,226,226,224,102,2,223,223,1005,224,404,1001,223,1,223,8,226,226,224,102,2,223,223,1006,224,419,101,1,223,223,1107,677,677,224,102,2,223,223,1006,224,434,1001,223,1,223,1107,226,677,224,1002,223,2,223,1006,224,449,101,1,223,223,7,677,677,224,1002,223,2,223,1006,224,464,1001,223,1,223,1108,226,677,224,1002,223,2,223,1005,224,479,1001,223,1,223,8,677,226,224,1002,223,2,223,1005,224,494,101,1,223,223,7,226,677,224,102,2,223,223,1005,224,509,101,1,223,223,1008,677,226,224,102,2,223,223,1006,224,524,101,1,223,223,8,226,677,224,1002,223,2,223,1006,224,539,1001,223,1,223,1007,677,677,224,102,2,223,223,1005,224,554,101,1,223,223,107,226,677,224,1002,223,2,223,1005,224,569,1001,223,1,223,1108,677,677,224,1002,223,2,223,1006,224,584,1001,223,1,223,1008,226,226,224,1002,223,2,223,1005,224,599,101,1,223,223,1008,677,677,224,102,2,223,223,1005,224,614,101,1,223,223,7,677,226,224,1002,223,2,223,1005,224,629,1001,223,1,223,107,677,677,224,1002,223,2,223,1006,224,644,101,1,223,223,1007,226,677,224,1002,223,2,223,1005,224,659,1001,223,1,223,1007,226,226,224,102,2,223,223,1005,224,674,101,1,223,223,4,223,99,226]

main :: IO()
main = do putStr "Part 01: "
          let out = run 0 prog [1]
          print $ last out
          putStr "Part 02: "
          let out = run 0 prog [5]
          print $ last out
